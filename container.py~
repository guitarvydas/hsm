from component import Component

class Container (Component):
    def step:
        # delegate step to all children, if any of them did any work, return True
        workDone = self.stepAnyChild ()
        if workDone:
            return True
        # else all children have finished working and have not needed to be stepped, so, is there another input to be processed?
        # a Container isBusy() if any of its Children isBusy(), we must not consume another input
        # until all Children are quiescent
        if self.isReady ():
            m = self.dequeueInput ()
            self.handle (m)
            return True
        return False
    def run (self):
        # finish processing one input to completion, don't consume the next input
        ## doWhile...
        workDone = self.stepAnyChild ()
        while workDone:
            workDone = self.stepAnyChild ()
        ## end doWhile...
    def isBusy (self):
        for child in self.children:
            if isBusy (child):
                return True
        return False
    def reset (self):
        for child in self.children:
            child.reset ()

    # internal
    def stepAnyChild (self):
        for child in self.children:
            childActed = child.step ()
            if childActed:
                return True
        return False
            
