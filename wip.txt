function next (nextState, env) {
  if (env.child) { exit env.child.state (env.child) }
  env.child = ∅
  enter nextState (env)
  env.state = nextState
}

machine Lamp (env) {
  default OFF
  enter { env <- { state: OFF, child: ∅ } }
  exit { exit brightness (env.child) ; env.child <- ∅ }
  states {
    state OFF { on pwr {next (ON, env)} }
    state ON { enter {} on pwr {next (OFF, env) exit {} } ; env.child <- delegate brightness (env.child)}
  }
  return env
}

machine brightness (env) {
  default dim
  enter { env <- { state: dim , child: ∅ } }
  exit { exit color (env.child) ; env.child <- ∅ }
  states {
    state dim { on brightness { next (MID, env)} ; env.child <- delegate color (env.child) }
    state MID { on brightness { next (HIGH, env)} ; env.child <- delegate color (env.child) }
    state HIGH { on brightness { next (dim, env) } ; env.child <- delegate color (env.child) }
  }
  return env
}

machine color (env) {
  default yellow
  enter { env <- { state: yellow, child: ∅ } }
  exit { env.child <- ∅ }
  states {
    state yellow { on color {next (green, env)} }
    state green { on color {next (red, env)} }
    state red { on color {next (yellow, env)} }
  }
  return env
}
  
