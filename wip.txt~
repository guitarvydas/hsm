enter ON:
  enter ON/brightness.default
    enter ON/brightness/dim.default
      enter ON/brightness/dim/yellow


next ON/brightness/dim/green
  exit ON/brightness/dim/yellow
  enter ON/brightness/dim/green

next OFF
  exit ON/brightness/dim/green
  exit ON/brightness/dim
  exit ON/brightness
  exit ON
  enter OFF

next ON
  exit OFF
  enter ON
    enter ON/brightness
      enter ON/brightness/default = ON/brightness/dim
        enter ON/brightness/dim/default = ON/brightness/dim/yellow

ON.default = ON/brightness
ON/brightness.default = ON/brightness/dim
ON/brightness/dim.default = ON/brightness/dim/yellow
ON/brightness/dim/yellow.default = nil

ON.default = brightness
brightness.default = dim
dim.default = yellow
yellow.default = nil

machine Lamp (env) {
  default OFF
  enter { env <- { state: OFF, child: ∅ } }
  exit { exit brightness (env.child) ; env.child <- ∅ }
  state OFF { on pwr {next (ON, env)} }
  state ON { on pwr {next (OFF, env)} ; env.child <- delegate brightness (env.child)}
  return env
}

machine brightness (env) {
  default dim
  enter { env <- { state: dim , child: ∅ } }
  exit { exit color (env.child) ; env.child <- ∅ }
  state dim { on brightness { next (MID, env)} ; env.child <- delegate color (env.child) }
  state MID { on brightness { next (HIGH, env)} ; env.child <- delegate color (env.child) }
  state HIGH { on brightness { next (dim, env) } ; env.child <- delegate color (env.child) }
  return env
}

machine color (env) {
  default yellow
  enter { env <- { state: yellow, child: ∅ } }
  exit { env.child <- ∅ }
  state yellow { on color {next (green, env)} }
  state green { on color {next (red, env)} }
  state red { on color {next (yellow, env)} }
  return env
}
  
